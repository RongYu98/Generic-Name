Add:
1. Mouse Down - Where you click will be the place the player is.
2. Mouse Move - As you move your mouse/finger, the locations (x and y) will be added to 2 arrays.
3. Mouse Up - When you let go, a new player is initialized with a unique ID.
   Using that ID, the arrays recored get stored into PATH, with the ID as the callback.

Delete:
1. Mouse Down - Finds the player using the Pythagorean Theorem.
2. If delete is true, set to true by pressing the button, it will delete itself.
3. Because delete is true, nothing else happens for mouseMove and mouseUp.

Select:
1. Once select is pressed, selecting will be true.
2. If a player is clicked on and select is true, then that player will become selectedPlayer,
   and selected will refer to its index.
3. If a selected is not -1, i.e. a player is selected, and selecting is not true, i.e. done picking player, the 'move' and 'up/end' functions will do nothing.
4. Same as Add Step 2 and 3, except instead of a new player, the player is the one at the index selected.

PATHS Storage:
1. PATHS has all the paths.
2. Each player has his single index.
3. Within each index is two arrays, the first is of xcoordinates and the second ycoordinates.
4. These arrays represent the path a player will make.

Player Movement:
1. Each player's ID corresponds to the index in PATHS which is theirs.
2. Each player has a onPos, i.e. on position, that signifies which pair of (x,y) the player is approaching.
3. Movement is determined by finding the angle using the slope of the line connecting the player's current xy to the target xy.
4. Using the angle, cosine and sin ensure that the player moves the exact distance each time

Resizing:
1. We figure out the empirical formula, the percentage of screen the ball is at.
2. We divide to get it, and then multiply it by the new width and height.

Misc. Notes:
1. JS is weird, undefined != true and does not throw an error, therefore, one can call it to see if it exists.
2. 